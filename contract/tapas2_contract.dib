#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[{"aliases":[],"name":"spiral"}]}}

#!markdown

# tapas2_contract

#!spiral

open rust
open rust.rust_operators

#!spiral

//// test

open testing

#!markdown

## tapas2_contract

#!markdown

### state

#!spiral

type state =
    {
        version : u32
        seeds : near.vector u8
    }

#!spiral

//// test
///! rust -c

()

#!spiral

//// test
///! rust -c

trace Verbose (fun () => "") id

#!markdown

### new

#!spiral

inl new () : state =
    {
        version = 2
        seeds = "seeds" |> sm'.byte_slice |> near.new_vector
    }

#!spiral

//// test
///! rust -c

inl state = new ()
trace Verbose (fun () => "tapas2_contract") fun () => { state = state |> sm'.format_debug }
trace Verbose (fun () => "") id

#!markdown

### max_seeds

#!spiral

inl max_seeds () : unativeint =
    100i32 |> convert

#!markdown

### contribute_seed

#!spiral

inl contribute_seed (seeds : rust.ref (rust.mut' (near.vector u8))) (seed : am'.vec u8) : () =
    seeds |> near.vector_extend seed

    inl seed_excess_len = (seeds |> rust.len |> fun x => x : u32 |> i32) - (max_seeds () |> i32)

    if seed_excess_len > 0 then
        inl seed_excess : am'.vec u8 =
            !\\(seed_excess_len, $'"!seeds.drain(0..$0 as u32).collect::<Vec<_>>()"')
        trace Debug
            fun () => "tapas2_contract.contribute_seed"
            fun () => { seed_excess_len seed_excess = seed_excess |> sm'.format_debug }
    trace Debug (fun () => "") (join id)

#!spiral

//// test
///! rust -c

inl replicate n =
    let rec 루프 i acc =
        if i > n
        then acc
        else
            inl i' = i % 10
            inl i' =
                if i' = 0
                then i % limit.max
                else i'
            루프 (i + 1) (i' :: acc)
    루프 1 []
    |> listm.rev
    |> listm'.box
    |> listm'.to_array'

inl max_seeds : u32 = max_seeds () |> convert
inl seeds = "" |> sm'.byte_slice |> near.new_vector |> rust.to_ref_mut

conv max_seeds * 1.2f64
|> replicate
|> am'.map_base u8
|> am'.to_vec
|> contribute_seed seeds

seeds
|> rust.len
|> _assert_eq max_seeds

#!markdown

### main

#!spiral

///! _

inl main () =
    !\($'"} //"') : ()

    !\($'"\#[derive( //"') : ()
    !\($'"  near_sdk::PanicOnDefault, //"') : ()
    !\($'"  borsh::BorshDeserialize, //"') : ()
    !\($'"  borsh::BorshSerialize, //"') : ()
    !\($'")] //"') : ()

    !\($'"pub struct OldState { //"') : ()
    !\($'"    version: u32, //"') : ()
    !\($'"    seeds: near_sdk::store::vec::Vector<u8>, //"') : ()
    !\($'"} //"') : ()

    !\($'"\#[near_sdk::near_bindgen] //"') : ()

    !\($'"\#[derive( //"') : ()
    !\($'"  near_sdk::PanicOnDefault, //"') : ()
    !\($'"  borsh::BorshDeserialize, //"') : ()
    !\($'"  borsh::BorshSerialize, //"') : ()
    !\($'")] //"') : ()

    !\($'"pub struct State ( //"') : ()

    !\($'"/*"') : ()
    (null () : rust.type_emit state) |> ignore
    !\($'"*/ )"') : ()

    !\($'"impl From<OldState> for State { //"') : ()
    !\($'"    fn from(old_state: OldState) -> Self { //"') : ()
    !\($'"        Self((old_state.version + 1, old_state.seeds)) //"') : ()
    !\($'"    } //"') : ()
    !\($'"} //"') : ()

    inl new_ () =
        !\($'"\#[init] //"') : ()
        !\($'"pub fn new() -> Self { // 1"') : ()

        (!\($'"true; /*"') : bool) |> ignore

        (null () : rust.type_emit ()) |> ignore

        (!\($'"true; */"') : bool) |> ignore

        inl result = new ()
        $'let _result = !result in _result |> (fun x -> Fable.Core.RustInterop.emitRustExpr x $"Self($0) // x") // 2' : ()

        !\($'"} // 2."') : ()

        !\($'"} // 1."') : ()

        2

    inl contribute_seed () =
        !\($'"pub fn contribute_seed(&mut self, seed: Vec<u8>) { //"') : ()
        inl seeds : rust.ref (rust.mut' (near.vector u8)) = !\($'$"&mut self.0.1"')
        inl seed : am'.vec u8 = !\($'$"seed"')

        seed |> contribute_seed seeds

        !\($'"} //"') : ()

        !\($'"} //"') : ()

        !\($'"} //"') : ()

        3

    inl contribute_seed_borsh () =
        !\($'"pub fn contribute_seed_borsh(&mut self, \#[serializer(borsh)] seed: Vec<u8>) { //"') : ()
        !\($'"    self.contribute_seed(seed) //"') : ()
        !\($'"} //"') : ()

        1

    inl fns =
        [
            new_
            contribute_seed
            contribute_seed_borsh
        ]

    // inl rec 루프 acc fns i =
    inl rec 루프 forall i {number} j {number}. (acc : i) (fns : list (() -> i)) (i : j) : i =
        match fns with
        | [] => acc
        | x :: xs =>
            !\($'"\#[near_sdk::near_bindgen] //"') : ()
            !\($'"impl State { //"') : ()
            inl n = x ()
            !\($'"} /* c"') : ()
            // inl rec 루프' i' =
            inl rec 루프' forall t {number}. (i' : t) : () =
                if i' <> 1 // <= n
                then (!\($'"true; */ // ???? / i: !i / i\': !i' / acc: !acc / n: !n"') : bool) |> ignore
                else
                    (!\($'"true; // ??? / i: !i / i\': !i' / acc: !acc / n: !n"') : bool) |> ignore
                    루프' (i' + 1)
            루프' 1u8
            루프 (acc + n) xs (i + 1)
    inl n = 루프 0u8 fns 1u8


    // !\($'"/* a"') : ()

    // !\($'"} // b"') : ()

    !\($'"fn _main() //"') : ()
    !\($'" //"') : ()

    inl rec 루프' i' =
        if i' <= n
        then
            (!\($'"true; { (); // ?? / i\': !i' / n: !n"') : bool) |> ignore
            루프' (i' + 1)
        else
            (!\($'"true; { { (); // ? / i\': !i' / n: !n"') : bool) |> ignore
            // (!\($'"true; */ // ?? / i\': !i' / n: !n"') : bool) |> ignore
    루프' 1u8

inl main () =
    $'!main |> ignore' : ()
